# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_stem', [dirname(__file__)])
        except ImportError:
            import _stem
            return _stem
        if fp is not None:
            try:
                _mod = imp.load_module('_stem', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _stem = swig_import_helper()
    del swig_import_helper
else:
    import _stem
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


COUNT = _stem.COUNT
BINARY = _stem.BINARY
FREQUENCY = _stem.FREQUENCY
NORMALIZED = _stem.NORMALIZED
BINARY_NORMALIZED = _stem.BINARY_NORMALIZED
class NGramConf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NGramConf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NGramConf, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _stem.new_NGramConf(*args)
        try: self.this.append(this)
        except: self.this = this
    def getEmbeddingType(self): return _stem.NGramConf_getEmbeddingType(self)
    def getLength(self): return _stem.NGramConf_getLength(self)
    def __eq__(self, *args): return _stem.NGramConf___eq__(self, *args)
    __swig_destroy__ = _stem.delete_NGramConf
    __del__ = lambda self : None;
NGramConf_swigregister = _stem.NGramConf_swigregister
NGramConf_swigregister(NGramConf)
cvar = _stem.cvar
NUM_EMBEDDINGS = cvar.NUM_EMBEDDINGS

class NGramItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NGramItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NGramItem, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _stem.new_NGramItem(*args)
        try: self.this.append(this)
        except: self.this = this
    def getFeature(self): return _stem.NGramItem_getFeature(self)
    def getValue(self): return _stem.NGramItem_getValue(self)
    def setFeature(self, *args): return _stem.NGramItem_setFeature(self, *args)
    def setValue(self, *args): return _stem.NGramItem_setValue(self, *args)
    def __lt__(self, *args): return _stem.NGramItem___lt__(self, *args)
    def __eq__(self, *args): return _stem.NGramItem___eq__(self, *args)
    __swig_getmethods__["compare_values"] = lambda x: _stem.NGramItem_compare_values
    if _newclass:compare_values = staticmethod(_stem.NGramItem_compare_values)
    __swig_getmethods__["compare_values_descending"] = lambda x: _stem.NGramItem_compare_values_descending
    if _newclass:compare_values_descending = staticmethod(_stem.NGramItem_compare_values_descending)
    __swig_getmethods__["close_to_0"] = lambda x: _stem.NGramItem_close_to_0
    if _newclass:close_to_0 = staticmethod(_stem.NGramItem_close_to_0)
    __swig_destroy__ = _stem.delete_NGramItem
    __del__ = lambda self : None;
NGramItem_swigregister = _stem.NGramItem_swigregister
NGramItem_swigregister(NGramItem)

def NGramItem_compare_values(*args):
  return _stem.NGramItem_compare_values(*args)
NGramItem_compare_values = _stem.NGramItem_compare_values

def NGramItem_compare_values_descending(*args):
  return _stem.NGramItem_compare_values_descending(*args)
NGramItem_compare_values_descending = _stem.NGramItem_compare_values_descending

def NGramItem_close_to_0(*args):
  return _stem.NGramItem_close_to_0(*args)
NGramItem_close_to_0 = _stem.NGramItem_close_to_0

class NGram(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NGram, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NGram, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _stem.new_NGram(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stem.delete_NGram
    __del__ = lambda self : None;
    def clone(self): return _stem.NGram_clone(self)
    def __iadd__(self, *args): return _stem.NGram___iadd__(self, *args)
    def __isub__(self, *args): return _stem.NGram___isub__(self, *args)
    def __imul__(self, *args): return _stem.NGram___imul__(self, *args)
    def __mul__(self, *args): return _stem.NGram___mul__(self, *args)
    def __eq__(self, *args): return _stem.NGram___eq__(self, *args)
    def L1norm(self): return _stem.NGram_L1norm(self)
    def L2norm(self): return _stem.NGram_L2norm(self)
    def reembed(self, *args): return _stem.NGram_reembed(self, *args)
    def trim(self, *args): return _stem.NGram_trim(self, *args)
    def getConfiguration(self): return _stem.NGram_getConfiguration(self)
    def getCount(self): return _stem.NGram_getCount(self)
    def getTopN(self, *args): return _stem.NGram_getTopN(self, *args)
NGram_swigregister = _stem.NGram_swigregister
NGram_swigregister(NGram)

KERNEL_LINEAR = _stem.KERNEL_LINEAR
KERNEL_RBF = _stem.KERNEL_RBF
class Kernel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Kernel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Kernel, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _stem.delete_Kernel
    __del__ = lambda self : None;
    def clone(self): return _stem.Kernel_clone(self)
    def getType(self): return _stem.Kernel_getType(self)
    def compute(self, *args): return _stem.Kernel_compute(self, *args)
    __swig_getmethods__["deserialize"] = lambda x: _stem.Kernel_deserialize
    if _newclass:deserialize = staticmethod(_stem.Kernel_deserialize)
Kernel_swigregister = _stem.Kernel_swigregister
Kernel_swigregister(Kernel)

def Kernel_deserialize(*args):
  return _stem.Kernel_deserialize(*args)
Kernel_deserialize = _stem.Kernel_deserialize

class LinearKernel(Kernel):
    __swig_setmethods__ = {}
    for _s in [Kernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinearKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [Kernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LinearKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _stem.new_LinearKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stem.delete_LinearKernel
    __del__ = lambda self : None;
    __swig_getmethods__["create"] = lambda x: _stem.LinearKernel_create
    if _newclass:create = staticmethod(_stem.LinearKernel_create)
    def clone(self): return _stem.LinearKernel_clone(self)
    def getType(self): return _stem.LinearKernel_getType(self)
    def compute(self, *args): return _stem.LinearKernel_compute(self, *args)
LinearKernel_swigregister = _stem.LinearKernel_swigregister
LinearKernel_swigregister(LinearKernel)

def LinearKernel_create():
  return _stem.LinearKernel_create()
LinearKernel_create = _stem.LinearKernel_create

class RBFKernel(Kernel):
    __swig_setmethods__ = {}
    for _s in [Kernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RBFKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [Kernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RBFKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _stem.new_RBFKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["create"] = lambda x: _stem.RBFKernel_create
    if _newclass:create = staticmethod(_stem.RBFKernel_create)
    def clone(self): return _stem.RBFKernel_clone(self)
    def getType(self): return _stem.RBFKernel_getType(self)
    __swig_destroy__ = _stem.delete_RBFKernel
    __del__ = lambda self : None;
    def compute(self, *args): return _stem.RBFKernel_compute(self, *args)
RBFKernel_swigregister = _stem.RBFKernel_swigregister
RBFKernel_swigregister(RBFKernel)

def RBFKernel_create():
  return _stem.RBFKernel_create()
RBFKernel_create = _stem.RBFKernel_create

class NGramArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NGramArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NGramArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _stem.new_NGramArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stem.delete_NGramArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _stem.NGramArray___getitem__(self, *args)
    def __setitem__(self, *args): return _stem.NGramArray___setitem__(self, *args)
    def cast(self): return _stem.NGramArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _stem.NGramArray_frompointer
    if _newclass:frompointer = staticmethod(_stem.NGramArray_frompointer)
NGramArray_swigregister = _stem.NGramArray_swigregister
NGramArray_swigregister(NGramArray)

def NGramArray_frompointer(*args):
  return _stem.NGramArray_frompointer(*args)
NGramArray_frompointer = _stem.NGramArray_frompointer



